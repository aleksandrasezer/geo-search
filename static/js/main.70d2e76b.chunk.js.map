{"version":3,"sources":["main/geo-list/GeoList.module.css","dal/api.ts","store/store.ts","main/geo-list/GeoList.tsx","main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx","main/Main.module.css"],"names":["module","exports","geoSearchAPI","text","axios","get","then","res","data","catch","geoListSlice","createSlice","name","initialState","geoList","searchText","serverError","reducers","setGeoList","state","action","payload","setSearchText","setServerError","actions","geoListReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","GeoList","useSelector","geoListToDisplay","length","slice","sort","a","b","indexOf","map","l","className","s","geoListCont","latitude","longitude","geonameid","Main","dispatch","useDispatch","useState","error","setError","isInvalidInput","input","test","useEffect","getState","errorInput","inputCont","onChange","e","currentTarget","value","toLowerCase","style","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70d2e76b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"geoListCont\":\"GeoList_geoListCont__DgdVq\"};","import axios from \"axios\";\r\n\r\nexport const geoSearchAPI = {\r\n    getGeo(text: string) {\r\n        return axios.get(`http://localhost:3000/locations?q=${text}`)\r\n            .then(res => res.data)\r\n            .catch(() => {return('error')})\r\n    }\r\n}\r\n\r\n//types\r\nexport type LocationRespType = {\r\n    geonameid: string\r\n    name: string\r\n    latitude: string\r\n    longitude: string\r\n}","import {configureStore, createSlice, Dispatch, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport {geoSearchAPI, LocationRespType} from \"../dal/api\";\r\n\r\nexport const initState = {\r\n    geoList: [] as [] | LocationRespType[],\r\n    searchText: '',\r\n    serverError: false,\r\n}\r\n\r\nconst geoListSlice = createSlice({\r\n    name: 'geoList',\r\n    initialState: initState,\r\n    reducers: {\r\n        setGeoList(state, action: PayloadAction<LocationRespType[]>) {\r\n            state.geoList = action.payload\r\n        },\r\n        setSearchText(state, action: PayloadAction<string>) {\r\n            state.searchText = action.payload\r\n        },\r\n        setServerError(state, action: PayloadAction<boolean>) {\r\n            state.serverError = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const {setGeoList, setSearchText, setServerError} = geoListSlice.actions\r\nexport const geoListReducer = geoListSlice.reducer\r\n\r\n//thunk\r\nexport const getGeoList = () => (dispatch: Dispatch) => {\r\n    const searchText = store.getState().geoList.searchText\r\n        geoSearchAPI.getGeo(searchText).then(res => {\r\n            if (res === 'error') {\r\n                dispatch(setServerError(true))\r\n            } else dispatch(setGeoList(res))\r\n        });\r\n}\r\n\r\n//store\r\nexport const store = configureStore({\r\n    reducer: {\r\n        geoList: geoListReducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n//types\r\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store/store\";\r\nimport s from './GeoList.module.css'\r\n\r\n\r\nexport const GeoList = () => {\r\n\r\n    const {geoList, searchText} = useSelector((state: RootState) => state.geoList)\r\n    const geoListToDisplay = geoList.length\r\n        ? geoList.slice().sort((a,b) => a.name.indexOf(searchText) - b.name.indexOf(searchText))\r\n        : geoList\r\n\r\n\r\n    return (\r\n        <div >\r\n            {geoListToDisplay.map(l => <div key={l.geonameid} className={s.geoListCont}><div>{l.name}</div><div>{l.latitude},{l.longitude}</div></div>)}\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getGeoList, RootState, setSearchText} from \"../store/store\";\r\nimport {GeoList} from \"./geo-list/GeoList\";\r\nimport s from './Main.module.css'\r\n\r\n\r\nexport const Main = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {searchText, serverError} = useSelector((state: RootState) => state.geoList)\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const isInvalidInput = (input: string) => {\r\n        return (/[^a-zA-Z0-9\\s]/.test(input) || input.length < 2)\r\n    }\r\n    const isValidInput = (input: string) => {\r\n        return (/[a-zA-Z0-9\\s]/.test(input) && input.length > 1)\r\n    }\r\n\r\n    const onInputChange = ((e: ChangeEvent<HTMLInputElement>) => {\r\n        const text = e.currentTarget.value\r\n        isInvalidInput(text) ? setError(true) : dispatch(setSearchText(text.toLowerCase()))\r\n        isValidInput(e.currentTarget.value) && setError(false)\r\n        isInvalidInput(text) && setError(true)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (searchText.length) {\r\n            dispatch(getGeoList())\r\n        }\r\n    }, [dispatch, searchText.length])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div><h1>Search Great Britain locations</h1></div>\r\n            {serverError\r\n                ? <div className={s.serverError}>Server is not responding.. Please try again later.</div>\r\n                : <div>\r\n                    <div className={error ? s.errorInput : s.inputCont}>\r\n                        <input onChange={onInputChange}/>\r\n                    </div>\r\n                    {error\r\n                        ? <div style={{color: 'red'}}>Please enter min. 2 characters. Letters or numbers.</div>\r\n                        : <GeoList/>}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Main} from \"./main/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputCont\":\"Main_inputCont__30wcL\",\"errorInput\":\"Main_errorInput__wqoNP\",\"serverError\":\"Main_serverError__fTQdI\"};"],"sourceRoot":""}